import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'jacoco'
}

group = "com.rnr"
version = "0.0.1-SNAPSHOT"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

bootJar {
    archiveFileName = 'app.jar'
}

repositories {
    mavenCentral()
    flatDir {
        dirs("libs")
    }
}

def osName = System.getProperty("os.name").toLowerCase(Locale.ROOT)

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'commons-io:commons-io:2.14.0'

    implementation platform('software.amazon.awssdk:bom:2.27.18')
    implementation 'software.amazon.awssdk:s3-transfer-manager'

    // Local SDK
    implementation files('libs/java-sdk-wrapper.jar')

    // Native lib hint (printed during configuration)
    def nativeLibHint = {
        if (osName.contains("win")) {
            "Detected Windows OS — ensure mip_java.dll is in libs directory."
        } else if (osName.contains("mac")) {
            "Detected macOS — ensure mip_java.dylib is in libs directory."
        } else if (osName.contains("nux") || osName.contains("nix") || osName.contains("ubuntu")) {
            "Detected Linux — ensure mip_java.so is in libs directory."
        } else {
            "Unknown OS — verify appropriate native library exists."
        }
    }
    println(nativeLibHint())

    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.4.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:5.0.0-alpha.14'
    testImplementation 'org.mock-server:mockserver-client-java:5.15.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        jvmTarget.set(JvmTarget.JVM_21)
        freeCompilerArgs.add("-opt-in=kotlin.RequiresOptIn")
    }
}

tasks.named('test', Test) {
    useJUnitPlatform()
    maxHeapSize = '1G'

    testLogging {
        events 'PASSED', 'SKIPPED', 'FAILED', 'STANDARD_ERROR'
        exceptionFormat = 'FULL'
    }
}

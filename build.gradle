import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'jacoco'
}

group = "com.rnr"
version = "0.0.1-SNAPSHOT"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

bootJar {
    archiveFileName = 'app.jar'
}

repositories {
    mavenCentral()
    flatDir {
        dirs("libs")
    }
}

def osName = System.getProperty("os.name").toLowerCase()

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'commons-io:commons-io:2.14.0'

    implementation platform('software.amazon.awssdk:bom:2.27.18')
    implementation 'software.amazon.awssdk:s3-transfer-manager'

    // Main MIP SDK Java library (from local libs directory)
    implementation files('libs/java-sdk-wrapper.jar')

    // --- Native library loading is handled by the MIP SDK at runtime ---
    // The SDK will automatically load the appropriate native library from the libs directory
    // based on the OS. Ensure the following files are present:
    // - Windows: mip_java.dll (already present)
    // - macOS: Add mip_java.dylib to libs directory for macOS support
    // - Linux: Add mip_java.so to libs directory for Linux support
    if (osName.contains("win")) {
        println "Detected Windows OS, native library (mip_java.dll) should be loaded from libs directory."
    } else if (osName.contains("mac")) {
        println "Detected macOS, ensure mip_java.dylib is present in libs directory."
    } else {
        println "Detected Linux/other OS, ensure mip_java.so is present in libs directory."
    }

    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.4.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:5.0.0-alpha.14'
    testImplementation 'org.mock-server:mockserver-client-java:5.15.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        jvmTarget.set(JvmTarget.JVM_21)
        freeCompilerArgs.add("-opt-in=kotlin.RequiresOptIn")
    }
}

tasks.named('test', Test) {
    useJUnitPlatform()
    maxHeapSize = '1G'

    testLogging {
        events 'PASSED', 'SKIPPED', 'FAILED', 'STANDARD_ERROR'
        exceptionFormat = 'FULL'
    }
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(false)
        csv.required.set(false)
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://devstack.vwgroup.com/sonar'
        property 'sonar.projectKey', 'RNR:AIP'
        property 'sonar.projectName', 'Risk & Response AIP'
        property 'sonar.exclusions', 'src/main/kotlin/com/rnr/aip/storage/S3ClientFactory.kt'
    }
}
